version: '3.1'

services:

  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - ./db:/var/lib/postgresql/data
    ports:
      - 5432:5432
    networks:
      - bookmarks-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    restart: always
    ports:
      - 6379:6379
    networks:
      - bookmarks-network
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  migrations:
    build:
      context: .
      dockerfile: Dockerfile.migrations
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_HOST=db
    depends_on:
      db:
        condition: service_healthy
    networks:
      - bookmarks-network
    volumes:
      - ./.env:/app/.env
    profiles:
      - dev
      - prod

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_HOST=db
      - SERVER_PORT=${SERVER_PORT}
      - SESSION_SECRET=${SESSION_SECRET}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    depends_on:
      - migrations
      - redis
    networks:
      - bookmarks-network
    volumes:
      - ./.env:/app/.env

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    environment:
      - NODE_ENV=${NODE_ENV}
    networks:
      - bookmarks-network
    profiles:
      - dev

networks:
  bookmarks-network:
    driver: bridge

volumes:
  redis-data: